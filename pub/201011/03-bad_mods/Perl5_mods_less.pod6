=begin pod :pubdate('2010-11-11 08:00:00') :tags<cpan perl>
=TITLE Perl 5 модули, которые я использую реже и реже

=begin DESCRIPTION

=for Image :align("left") :preview
cgi.jpg

Не все так чудесно и замечательно. Со временем приходится отказываться от некоторых библиотек и модулей CPAN. Процесс естественный, на мой взгляд, и я расскажу о своем списке таких модулей.

=end DESCRIPTION

Не все так чудесно и замечательно. Со временем приходится отказываться от некоторых библиотек и модулей CPAN. Процесс естественный, на мой взгляд, и я расскажу о своем списке таких модулей.

=begin item :term("Template-Toolkit")
=para
Этот модуль у меня первый в списке. Хоть и связаны с ним наилучшие применения, но были и случаи когда его работоспособность зависела от пробела в строке файла шаблона. Как-то приходилось проходить грандиозный квест по его установке на Windows платформе I<( тогда я окончательно понял, что мне больше нравятся шутеры)>.
=para
Но это все не основные причины, почему я отказываюсь от этого модуля. Однажды я встретил файл шаблона, состоящий из одинокого html тэга B<div>. Конечно этот файл годом ранее содержал логику обработки данных, производил какой-то HTML, но со временем выродился в небольшой файл. Это стало поводом задуматься: нужны ли дополнительные шаблонизаторы ? Ведь сам Perl 5 ориентируется на обработку текста.
=para
К тому же основными тенденциями I<( конечно же это уже факт)> являются перенос логики представления данных на строну клиента, а при взаимодействии с сервером преобладают форматы XML, JSON. Указанные форматы, да и просто текст, прекрасно формируется без участия B<Template-Toolkit>. Поэтому отказ от него в моем случае скорее технологический, чем политический I<:-)>.
=end item

=for item :term("XML::SAX")
В свое время эта библиотека, а именно работа с пространствами имен, реализованная в ней, подвигла к созданию библиотеки L<XML::ExtOn|http://search.cpan.org/perldoc?XML::ExtOn>. По сути I<XML::ExtOn> является надстройкой над I<XML::SAX>, расширяя функционал объектами и упрощая манипуляции с пространствами XML имен. На сегодня нет необходимости в базовой библиотеке I<XML::SAX> и поэтому в  планах от нее отказаться.

=for item :term("XML::SAX::Writer")
Этот модуль хорош всем, кроме того, что использует I<Text::Iconv>. У I<Text::Iconv> проблемы с портом под Windows, связанные прежде всего с библиотекой B<libiconv>. В итоге все это мешает использованию I<Perl6::Pod> на платформе Windows. Поэтому я планирую отказаться совсем от I<XML::SAX::Writer>.

=for item :term("CGI.pm")
В процессе реализации REST доступа к сайту L<zag.ru|http://zag.ru>, выяснилось что вместе с Perl v5.10.0 поставляется устаревшая версия L<CGI.pm> 3.29 I<(вышедшая 3 года назад!)>. И она с ошибками обрабатывает специальные параметры, а именно B<POSTDATA> и B<PUTDATA>. Эта проблема проявляется в распространенном дистрибутиве Debian "Lenny" и лечится обновлением модуля I<CGI.pm> с CPAN. В FreeBSD I<CGI.pm> установлен через отдельный порт, который часто обновляется и поэтому причину проблем я заметил не сразу I<(лишь после размещения кода на рабочем сервере)>. Эта проблема, не основная, но способствовала попаданию I<CGI.pm> в этот список.

=for Image 
cgi.jpg

Такой у меня получился список. В завершении можно было привести список модулей от использования, которых я уже отказался, но вспомнились только I<Apache2::Module> и  I<Pod::Parser>. От I<Apache2::Module> я успешно перешел на I<FCGI>,а на смену I<Pod::Parser> пришел L<Perl6::Pod|http://search.cpan.org/perldoc?Perl6::Pod>.



=end pod
