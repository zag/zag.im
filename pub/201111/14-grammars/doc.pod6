=begin pod :pubdate('2011-11-14 12:00:00') :tags<perl6 pod perl perl5 plosurin>
=NAME Грамматики в Java, Perl 6 и Perl 5 

=begin DESCRIPTION

Грамматики представляют собой в общем случае набор "правил", с помощью которых можно определить языковые конструкции, поддерживающие так же произвольную вложенность. Сфера применения грамматик - сложный синтаксический анализ текста или данных. 

=end DESCRIPTION

Грамматики представляют собой в общем случае набор "правил", с помощью которых можно определить языковые конструкции, поддерживающие так же произвольную вложенность. Сфера применения грамматик - сложный синтаксический анализ текста или данных N<Синтаксический анализ и инструментарий. L<http://ru.wikipedia.org/wiki/Синтаксический анализ|http://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D0%BD%D1%82%D0%B0%D0%BA%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%82%D0%BE%D1%80>>.

Без грамматик не обойтись, в случаях создания компиляторов языков, интерпретаторов и т.д.
В последнее время я плотно использую грамматики в Java, Perl 6 и Perl 5. Вкратце выскажусь о них в каждом из языков.

=head2 Грамматики в Java

JavaCC I<(Java Compiler Compiler)>, пожалуй, наиболее распространенный генератор парсеров для Java. Включает в себя утилиту JJTree для построения синтаксических деревьев.

Синтаксис определения правила простой: элемент грамматики, список элементов грамматики и альтернативный список. Например, следующим токеном определяются цифры и числа:

 TOKEN:
 {
  < NUMBER: (<DIGIT>)+ ( "." (<DIGIT>)+ )? >
  | < DIGIT: ["0"-"9"] >
  }

Примеры грамматик можно найти в репозитории JavaCC грамматик N<Репозиторий JavaCC грамматик. L<http://java.net/projects/javacc/downloads/directory/contrib/grammars>>. 


=head2 Грамматики в Perl 6

В Perl 6 грамматики являются частью языка и это одна из самых замечательных фитч языка. Поэтому ничего удивительного нет в том, что синтаксис Perl 6 описан с помощью его же грамматик N<Грамматика Perl 6. L<https://raw.github.com/perl6/std/master/STD.pm6>>.

Грамматики в Perl 6 фактически представлены в виде классов и могут наследовать другие грамматики. Процесс обработки текста может быть совмещен с построением синтаксического дерева.
Для этого парсеру передается параметр I<action>, значением которого является объект обрабатывающий совпадения токенов (в Perl 6 ими являются лексемы I<token> и I<rule>).

Например:

    my $res = Plosurin::Grammar.parse($txt, :actions(Plosurin::Actions.new ));

При обработке C<$txt>, в случае совпадения токена, для построения абстрактного синтаксического дерева I<(AST)> будут вызваны методы объекта C<Plosurin::Actions>. Результаты вызовов  станут частью результирующего дерева.

Такая интеграция в язык программирования позволяет упростить использование грамматик. Насколько ? Можно к примеру сравнить определение грамматики для обработки JSON для JavaCC N<Определение грамматики JSON для JavaCC.L<http://java.net/downloads/javacc/contrib/grammars/JSONParser.jj|http://java.net/downloads/javacc/contrib/grammars/JSONParser.jjt>> и Perl 6 N<Грамматика JSON в Perl 6. L<https://raw.github.com/moritz/json/master/lib/JSON/Tiny/Grammar.p|https://raw.github.com/moritz/json/master/lib/JSON/Tiny/Grammar.pm>> (для наглядности в одном gist N<Грамматики обработки JSON для JavaCC и Perl 6. L<https://gist.github.com/1363580|https://gist.github.com/1363580>>). 


=head2 Грамматики в Perl 5

Для Perl 5 грамматики реализованы в виде библиотеки Regexp-Grammars N<Библиотека грамматического анализа для Perl 5 Regexp-Grammars. L<http://search.cpan.org/dist/Regexp-Grammars/>>. 

Следующий пример из документации, демонстрирует правила для парсинга LaTeX:

   use Regexp::Grammars;
    $parser = qr{
        <File>
        <rule: File>       <[Element]>*
        <rule: Element>    <Command> | <Literal>
        <rule: Command>    \\  <Literal>  <Options>?  <Args>?
        <rule: Options>    \[  <[Option]>+ % (,)  \]
        <rule: Args>       \{  <[Element]>*  \}
        <rule: Option>     [^][\$&%#_{}~^\s,]+
        <rule: Literal>    [^][\$&%#_{}~^\s]+
    }xms;

Тем, кто немного знаком с грамматиками Perl 6, приведенный выше пример покажется знакомым. 

Внешне и по возможностям Regexp-Grammars очень близка к грамматикам Perl 6: есть наследование, построение синтаксического дерева. А в плане отладки правил функционал даже превосходит Perl 6.

B<Regexp::Grammars одна из тех библиотек, которые знать очень полезно!>


=end pod
