=begin pod :pubdate('2012-01-12 10:00:00') :tags<plosurin perl>
=NAME Plosurin: Perl реализация Closure Templates

=begin DESCRIPTION

=for Image :align("left") :preview
plosurin-logo-175.png

Мой процесс избавления от Template::Toolkit и вообще шаблонизаторов в какой-то момент замедлился. Причиной тому стали ситуации, когда перенос представления на сторону клиента грозил появлением новых проблем.


=end DESCRIPTION

Мой процесс избавления от Template::Toolkit N<Perl 5 модули, которые я использую реже и реже. L<zag.ru/b48j1|http://zag.ru/b48j1>> и вообще шаблонизаторов в какой-то момент замедлился. Причиной тому стали ситуации, когда перенос представления на сторону клиента грозил появлением новых проблем.

Вот пару типичных случаев:

=begin item
статический текст из документации

Иногда, бывает очень удобно (I<в первую очередь для пользователя!>) в интерфейсе сайта привести выдержку из документации. Обычно это статический текст в несколько абзацев, но может быть и целая страница  с несколькими главами. Подобного рода данные, в случае, когда представление полностью перенесено на сторону клиента, помещаются в JavaScript библиотеки и затем загружаются браузером клиента. 

Проблема здесь вполне очевидная: растет объем загружаемых данных. К тому же, не факт, что некоторые из них могут пригодится. Есть решения: это сжатие библиотек, использование отложенной загрузки требуемых частей (например, в GWT можно подгружать как код, так и ресурсы). Подобные рецепты приходится использовать, несмотря на привнесение некоторого усложнения разработки.
=end item

=begin item
форматирование потока данных

Зачастую, возникают задачи потоковой обработки данных. К примеру, нужно сформировать объемную страницу (I<это может быть XML, HTML или тот же JSON>) из потока данных, извлекаемых из базы. В этом случае проще формировать результирующий текст по мере извлечения записей. К тому же, браузер или устройство может обладать ограниченными возможностями, чтобы собрать страницу. Например, не хватит памяти в игровой приставке или телевизоре :-).
=end item 

В client-side разработке я использую GWT и Google Closure, где тоже есть шаблоны. Я имею в виду Closure Templates, которые транслируются в программный код JavaScript и Java. 

И если уж не получается полностью избавиться от шаблонов, то пусть хотя бы они будут едины как для серверной стороны, так и для  клиентской.

Таким образом появилось желание реализовать Closure Templates N<Closure Templates Documentation. L<http://code.google.com/intl/ru-RU/closure/templates/docs/overview.html|http://code.google.com/intl/ru-RU/closure/templates/docs/overview.html> > для Perl. Транслятор Closure Templates реализован на Java и в Google работает небольшая команда I<(буквально пара-тройка)> разработчиков, которые не в состоянии регулярно поддерживать сторонние языки. Поэтому логично было реализовать эту систему целиком на Perl N<Сайт проекта Plosurin. L<plosur.in|http://plosur.in>>.

=head2 Plosurin - Perl реализация Closure Templates

=for Image 
plosurin-logo-175.png


Perl реализаций на сегодня две:

=begin defn
Perl 6 N< Perl 6 реализация Closure Templates. L<http://github.com/zag/plosurin|http://github.com/zag/plosurin>>

Благодаря шикарной встроенной поддержке синтаксического анализа я начал разработку с реализации 
на Perl 6. На данный момент есть вероятность, что изменения в предстоящем
релизе Rakudo  привнесут нестабильность для некоторых программ N<‘nom’ branch is now default, release status. L<rakudo.org/2011/09/09/nom-branch-default/|http://rakudo.org/2011/09/09/nom-branch-default/>>. По этой 
причине реализация на Perl 6 отложена.
=end defn

=begin defn 
Perl 5 N< Perl 5 реализация Closure Templates. L<http://github.com/zag/p5-plosurin|http://github.com/zag/p5-plosurin>>

Данная реализация, конечно, еще далека от совершенства, но минимально
необходимый функционал реализован. Plosurin понимает структуру файлов
с шаблонами, грамматику шаблонов и умеет обрабатывать переменные 
в математических выражениях. К тому же есть режим, когда Plosurin
превращается в web сервер и позволяет ускорить разработку шаблонов.

=end defn

Наиболее важным для меня результатом является B<снижение «энтропии» в разработке, благодаря появлению единой системы шаблонов для серверной и клиентской части>.

=end pod
